#!/bin/bash

ARG="-5588 -439 1306 -6728 -1612 1242 -4342 -8186 -2139 -3946 6475 3998 691 -3191 -7285 5385 2707 1197 -3094 3997 -4456 3912 7721 -7260 -1894 7441 5710 -5794 -2027 -2085 2465 357 -255 -17 9766 1821 2797 1823 3209 8270 -4636 -3964 2846 9827 393 -8529 -3613 -466 -7658 6625 2735 -4745 3964 -7980 -4330 -4008 8071 5270 7435 -2635 4216 -7465 -3303 -9550 7327 -7205 -405 -970 -8658 -683 6435 -3777 5484 4787 -5911 -6467 -8161 -5869 1162 -8777 -6846 -792 2405 9912 -9911 9578 3523 -5421 -3701 -4536 -6638 -5054 -4997 2388 -146 8114 -7424 -5419 -1677 -7033 -9821 -3993 4152 -7860 -38 -595 -1848 581 -7734 6642 -8025 6414 9001 6151 -2305 8502 -6214 1032 -5042 9891 -2418 -8280 379 9614 7169 5928 -9373 -7529 7811 -5922 2651 8176 -623 -1583 7174 3151 8088 -9197 9800 -6275 -2621 -451 1537 3451 -6957 6996 8243 -3562 -3953 7065 -6835 -9093 -3769 6227 8395 2610 -157 -3683 4156 6231 5085 2152 481 2649 -3822 -9280 6520 -833 790 -4338 -1279 4040 -7531 908 3566 -2178 -9434 -332 -1995 947 -9877 -678 -3856 -3862 -9957 -3753 3109 -6894 6519 4315 4920 -2966 -3708 -9818 210 -9627 -9347 5283 -2317 -1602 9921 -1337 9124 -3546 -508 -8781 5324 8787 4352 8997 9447 3313 -793 169 9368 1430 8220 -6035 -3422 3584 -2459 2154 6112 -7012 5176 1397 165 2476 2623 -5487 5600 5945 2208 -7251 -9603 -6888 8650 1215 -9881 -1065 2225 -9669 1672 -5412 5133 7713 -4426 509 4070 9299 1193 5263 -5540 -1362 4899 2195 3779 -5374 5856 -372 6157 5096 -7692 -2545 9789 1576 9437 -513 4388 6101 -674 -6595 -6487 -757 -7353 -224 8972 7988 -5918 -1023 8322 -8720 -6909 1533 -6927 -1309 -7386 1188 6440 1993 9339 -7910 7561 4666 6946 -6027 3330 5926 -6163 -153 7537 -256 -6131 8968 2890 2716 -2107 -666 2359 2923 9415 -3823 1700 9489 -883 1680 2783 -1711 6288 -4629 -6418 -116 5386 8403 1031 -1505 -4239 -1159 5287 -6355 2142 1990 -4007 3468 9429 -7513 4748 -2217 6965 -1942 -2480 -1817 -6675 8553 -6308 -9926 -2580 -1779 3656 -7588 6115 -4094 2192 3562 1502 6428 -1712 -7571 8311 -7130 -1259 3763 7618 -6127 1049 -4585 -8402 -8183 -8132 -4155 -9206 4010 -9425 -1992 -6116 3498 -2610 9651 5529 7961 26 -4590 -9569 3475 1733 140 -8061 -6559 -7461 -5589 61 -2693 -1196 -9258 8858 5144 -8854 -9135 1341 -1356 -1863 1147 239 -5849 -4644 -6486 -9697 -8924 -6097 -2761 -4396 9911 7126 1551 -1058 -5140 -9406 9851 -22 5649 -9998 -1291 -6879 7979 -9778 -6351 -5927 3235 7595 -9560 -1645 1594 -3755 8660 5190 5002 -5892 8546 6188 5685 1179 -7269 8103 -4346 2506 1009 -3697 -9210 -1369 -7150 -63 -1319 -3795 5775 7176 1779 5154 -8972 218 8156 5868 5783 1740 8998 3666 8934 4313 -9394 -3479 3622 2501 -7879 -773 -835 387 -3 9590 4605 -3652 6904 -1948 8215 -7749 820 -6917 -5441 275 -4171 19 -916 -1209 -2655 9438 418 -1422 3634 -5771 -6140 -266 4763 3687 -1579 4293 -4604 7199 -3719 -3888 9567 -3331 4522 -9860 3817 -2295 -7904 -5360 -7407 -4897 -2255 369 -9088 -1016 6092 -9254 -5826 8447 1189 7796 -4382 -7317 7604 -2706 -6680 103 -5974 7144 -9104 -3780 -4736 9108 1986 -2699 6141 -6162 8211 -1694 -3649 9110 -7228 644 -6066 8291 -569 -2222 4243 5024 -1052 7838 -3939 -4628 1622 5124 -928 -1504 -3292 2543 -164 3428 -938 -5553 5297 -4989 -2443 -3730 -9527 -8098 -2122 9721 3762 -9383 9634 -1492 3963 1449 3558 9629 2047 212 5513 -1389 3774 4557 -9392 -3123 8056 -8694 -8301 -7066 7504 -8884 -3640 1398 1203 6594 -4694 -3051 -1238 535 4865 1548 -8212 9674 8492 -4076 -2079 7450 4241 -9559 -8573 3085 -6455 5247 9636 2542 -2018 4988 -2901 -1839 -909 -1010 -4658 -4737 -5710 -3338 -8244 -4273 -1366 -4682 -2607 5295 9957 -6682 -1875 -607 9870 -8551 -1170 -6601 6897 7848 6295 -5870 3926 7259 -2741 2521 -5507 -8144 -2034 -2300 -8617 -6482 -7432 -2366 -193 2083 -2153 6252 2402 2848 8513 -2525 5661 -6447 -9928 5784 -7112 -4714 6971 5689 -7849 6617 3340 2280 -2426 1372 3570 -2024 -4661 -363 6765 4065 6483 2558 -5622 2741 4020 -2583 8948 -4345 9993 5900 8579 3961 2853 -4260 1714 -3790 4445 8283 -1103 -447 946 8374 6860 -2653 -5270 623 7313 -2738 -4721 3105 377 9525 -4834 1371 4979 -7162 9876 3863 -5243 -6692 3149 2572 -9045 7058 6858 -4290 4712 5257 -5200 666 8438 -3270 2892 3484 909 2620 9907 6696 -759 882 -7561 1392 -499 -602 7172 -2136 -1345 1515 -5619 -8202 8615 -3812 1257 2731 9098 7470 -72 1313 -996 2261 -8589 -1716 8480 6721 -6500 4721 -8590 -6395 -9955 -4355 955 3268 2200 -6511 -8805 -8943 -9451 3202 -8262 2422 -7666 -6928 3158 4514 -6977 -3846 7079 9170 -4506 2570 -4054 4044 4907 -9322 -5455 940 -1678 -1149 -8691 8463 6874 -5800 7440 903 -1266 -1666 279 -8111 -3516 3084 -9638 9618 5269 3119 -5684 732 6575 -2882 -8210 -2170 876 -1707 289 -8420 -6815 -2880 7006 672 -5715 4478 714 8617 -1114 3540 6613 -4308 -9976 -3300 -1271 -6753 -546 -5084 -5563 6768 2592 -7629 -4124 -7592 -9666 -510 3021 -5124 -2975 -1056 7123 -9632 9898 9732 7577 9389 -8110 -8731 -523 3318 -5188 2130 8636 1393 4207 250 -2407 9239 -1378 8802 2642 3196 964 4027 -8957 3478 -8232 7185 8635 558 3633 -2335 -8240 2425 -192 -2556 -7119 -3104 5360 5368 7392 -4669 5576 9418 4566 4975 -358 -4182 -5933 -26 -4770 -9222 5931 -3637 -2675 3228 9017 -8187 -276 3632 7096 9009 94 2829 -7714 -8958 9558 -2395 -4278 4681 -3413 5749 9672 -9404 -4518 2312 8120 -2510 2386 -6435 1180 4106 -567 579 -9566 8686 -2175 1423 8361 -8387 -3436 8101 -1336 -249 -8804 -9738 2353 -7624 7153 -5428 -7100 4428 -927 9014 -114 -3633 9328 6124 -2036 -1556 2514 -2639 8982 -9843 9181 5517 -1085 -5391 -1662"

BOLD="\e[1m"
GREEN_COLOR="\e[32m"
RED_COLOR="\e[31m"
RESET_COLOR="\e[0m"

# To be shure our push_swap is working
CHECK_COUNT=0
MAX_CHECK_COUNT=0

# The number of normal tests
NORMAL_COUNT=0
NORMAL_CHECK_COUNT=0

# The number of 125% tests
SUCCESS_COUNT=0
MAX_SUCCESS_COUNT=0

# The number of strict count
STRICT_COUNT=0
MAX_STRICT_COUNT=0

# How does the tester_data file is formed?
# You'll have the test entry's
# Then you'll have the "strict" value
# The "strict" values are the best move I succeed to do with my brain, or -1 for "no data"
# The "passed" values are to do 100% at the project (hardcoded)
# The "normal" values are just here to verify you do at least 2 points on this category (hardcoded)

function test()
{
	IFS=" " read -ra argv <<< "$2"
	argc=${#argv[@]}

	RES=$(./push_swap $2 | ./checker $2)
	if [[ $RES != "OK" ]]; then
		printf "($1) Result: test$RED_COLOR failed$RESET_COLOR\n\n"
	else
		printf "($1) Result: test$GREEN_COLOR succeed$RESET_COLOR\n"
		((CHECK_COUNT++))

		RES=$(./push_swap $2 | wc -l)

		if (( argc <= 3 )) && (( RES <= 3 )); then
			((NORMAL_COUNT++))
			((SUCCESS_COUNT++))
		fi
		if (( argc > 3 )) && (( argc <= 5 )) && (( RES <= 12 )); then
			((NORMAL_COUNT++))
			((SUCCESS_COUNT++))
		fi
		if (( argc > 5 )) && (( argc <= 100 )) && (( RES <= 700 )); then
			((SUCCESS_COUNT++))
		fi
		if (( argc > 5 )) && (( argc <= 100 )) && (( RES <= 1300 )); then
			((NORMAL_COUNT++))
		fi
		if (( argc > 100 )) && (( argc <= 500 )) && (( RES <= 5500 )); then
			((SUCCESS_COUNT++))
		fi
		if (( argc > 100 )) && (( argc <= 500 )) && (( RES <= 10000 )); then
			((NORMAL_COUNT++))
		fi
		((MAX_SUCCESS_COUNT++))
		((NORMAL_CHECK_COUNT++))

		if (( $3 >= 0 )) && (( RES > $3 )); then
			((MAX_STRICT_COUNT++))
			printf "($1) Ops: test$RED_COLOR failed$RESET_COLOR\nReceived: $RED_COLOR$RES$RESET_COLOR\nRequired: $GREEN_COLOR$3$RESET_COLOR\nTest: ./push_swap $2\n\n"
		else
			printf "($1) Ops: test$GREEN_COLOR succeed$RESET_COLOR\n\n"
			((STRICT_COUNT++))
			((MAX_STRICT_COUNT++))
		fi
	fi
	((MAX_CHECK_COUNT++))
}


echo "Test with empty list"
RES=$(./push_swap > /dev/null 2>__errors.txt)
while IFS= read -r line
	do
	if [[ $line != "Error" ]]; then
		printf "(1): test$RED_COLOR failed$RESET_COLOR\n\n"
	else
		printf "(1): test$GREEN_COLOR succeed$RESET_COLOR\n\n"
		((CHECK_COUNT++))
	fi
	((MAX_CHECK_COUNT++))
done < __errors.txt

rm __errors.txt

LAST_ARGC=0
TEST_ID=1
while read line; do
	IFS=" " read -ra argv <<< "$line"
	argc=${#argv[@]}
	argc=$((argc - 1))
	if (( LAST_ARGC != argc )); then
		printf $BOLD 
		printf "Test with $argc elements$RESET_COLOR\n"
		LAST_ARGC=$((argc))
		TEST_ID=1
	fi
	sliced=${argv[@]:0:argc}
	test $TEST_ID "$sliced" ${argv[argc]}
	((TEST_ID++))
done < tester_data

if ((CHECK_COUNT<MAX_CHECK_COUNT)); then
	printf "[VAL]\t$RED_COLOR$CHECK_COUNT/$MAX_CHECK_COUNT$RESET_COLOR tests succedded\n"
else
	printf "[VAL]\t$GREEN_COLOR$CHECK_COUNT/$MAX_CHECK_COUNT$RESET_COLOR tests succedded\n"
fi

if ((STRICT_COUNT<MAX_STRICT_COUNT)); then
	printf "[OPS]\t$RED_COLOR$STRICT_COUNT/$MAX_STRICT_COUNT$RESET_COLOR strict tests succedded\n"
else
	printf "[OPS]\t$GREEN_COLOR$STRICT_COUNT/$MAX_STRICT_COUNT$RESET_COLOR strict tests succedded\n"
fi

if ((SUCCESS_COUNT<MAX_SUCCESS_COUNT)); then
	printf "[OPS]\t$RED_COLOR$SUCCESS_COUNT/$MAX_SUCCESS_COUNT$RESET_COLOR for the 100%% tests succedded\n"
else
	printf "[OPS]\t$GREEN_COLOR$SUCCESS_COUNT/$MAX_SUCCESS_COUNT$RESET_COLOR for the 100%% tests succedded\n"
fi

if ((NORMAL_COUNT<NORMAL_CHECK_COUNT)); then
	printf "[OPS]\t$RED_COLOR$NORMAL_COUNT/$NORMAL_CHECK_COUNT$RESET_COLOR normal tests succedded (2pts)\n"
else
	printf "[OPS]\t$GREEN_COLOR$NORMAL_COUNT/$NORMAL_CHECK_COUNT$RESET_COLOR normal tests succedded (2pts)\n"
fi